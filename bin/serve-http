#!/usr/bin/env php
<?php


use Moln\IpQuery\Provider\CacheWrapperProvider;
use Psr\Log\LoggerInterface;
use Swoole\Http\Server;

(function () {
    Swoole\Runtime::enableCoroutine(true);

    $container = require __DIR__ . '/../config/container.php';

    $config = $container->get('config')['server_http'];

    $defaultConfig = [
        'host' => '0.0.0.0',
        'port' => 9502,
        'mode' => SWOOLE_PROCESS,
        'sock_type' => SWOOLE_SOCK_TCP,
    ];
    $config = $config + $defaultConfig;
    $server = new Server(
        config_pop($config, 'host'),
        config_pop($config, 'port'),
        config_pop($config, 'mode'),
        config_pop($config, 'sock_type')
    );

    $server->set($config);

    /** @var LoggerInterface $logger */
    $logger = $container->get(LoggerInterface::class);

    /** @var \Swoole\ConnectionPool $providerPool */
    $providerPool = $container->get('ProviderPool');

    $server->on('request', function ($request, \Swoole\Http\Response $response) use ($providerPool, $logger) {
        $ip = $request->get['ip'] ?? null;
        if (!$ip || ip2long($ip) === false) {
            $response->status(403);
            $response->end(json_encode(['error' => 'Invalid ip']));
            return ;
        }

        try {
            /** @var CacheWrapperProvider $provider */
            $provider = $providerPool->get();
            $result = $provider->query($ip);
            $response->header("Content-Type", "application/json; charset=utf-8");
            $response->end(json_encode($result, JSON_UNESCAPED_UNICODE));
            return ;
        } catch(\Throwable $e) {
            $logger->error($e->getMessage());

            $response->setStatusCode(500);
            $response->end((string)$e);
        } finally {
            $providerPool->put($provider);
        }
    });


    $server->on('start', function () use ($logger) {
        $logger->info('Start...');
    });
    $server->on('ManagerStart', function () use ($logger) {
        $logger->info('ManagerStart...');
    });
    $server->on('WorkerStart', function ($server, $worker_id) use ($logger) {
        $logger->info('WorkerStart, PID: ' . getmypid() . '...');

        if($worker_id >= $server->setting['worker_num']) {
            swoole_set_process_name("php ip-query-http task worker");
        } else {
            swoole_set_process_name("php ip-query-http event worker");
        }
    });
    $server->on('Shutdown', function () use ($logger) {
        $logger->info('Shutdown...');
    });
    $server->start();
})();