#!/usr/bin/env php
<?php

use Moln\IpQuery\Provider\CacheWrapperProvider;
use Psr\Log\LoggerInterface;
use Swoole\Redis\Server;

(function () {
    $container = require __DIR__ . '/../config/container.php';
    Swoole\Runtime::enableCoroutine(true);

    $config = $container->get('config')['server_redis'];

    $defaultConfig = [
        'host' => '0.0.0.0',
        'port' => 9501,
        'mode' => SWOOLE_PROCESS,
        'sock_type' => SWOOLE_SOCK_TCP,
    ];
    $config = $config + $defaultConfig;
    $server = new Server(
        config_pop($config, 'host'),
        config_pop($config, 'port'),
        config_pop($config, 'mode'),
        config_pop($config, 'sock_type')
    );
    $server->set($config);

    /** @var LoggerInterface $logger */
    $logger = $container->get(LoggerInterface::class);

    /** @var \Swoole\ConnectionPool $providerPool */
    $providerPool = $container->get('ProviderPool');

//asynchronous mode
    $server->setHandler('Get', function ($fd, $data) use ($server, $providerPool, $logger) {
        if (count($data) != 1) {
            $server->send($fd, Server::format(Server::ERROR, 'ERR wrong number of arguments for \'get\' command'));
            return ;
        }
        if (ip2long($data[0]) === false) {
            $server->send($fd, Server::format(Server::ERROR, 'ERR Invalid argument, need IPv4 format.'));
            return ;
        }

//    $server->send($fd, Server::format(Server::STRING, str_repeat('a', 1024)));
//    return ;
        try {
            /** @var CacheWrapperProvider $provider */
            $provider = $providerPool->get();
            $result = $provider->query($data[0]);
            $server->send($fd, Server::format(Server::STRING, json_encode($result, JSON_UNESCAPED_UNICODE)));
        } catch(\Exception $e) {
            $logger->error($e->getMessage());
            $server->send($fd, Server::format(Server::ERROR,'ERR Provider throw exception: ' . str_replace(["\n", "\r"], "", $e->getMessage())));
        } finally {
            $providerPool->put($provider);
        }
    });

    $server->on('start', function () use ($logger) {
        $logger->info('Start...');
    });
    $server->on('ManagerStart', function () use ($logger) {
        $logger->info('ManagerStart...');
    });
    $server->on('WorkerStart', function ($server, $worker_id) use ($logger) {
        $logger->info('WorkerStart, PID: ' . getmypid() . '...');

        if($worker_id >= $server->setting['worker_num']) {
            swoole_set_process_name("php ip-query-redis task worker");
        } else {
            swoole_set_process_name("php ip-query-redis event worker");
        }
    });
    $server->on('Shutdown', function () use ($logger) {
        $logger->info('Shutdown...');
    });
    $server->start();

})();